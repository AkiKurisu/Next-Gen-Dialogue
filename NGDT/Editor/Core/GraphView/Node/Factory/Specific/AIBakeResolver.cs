using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using UnityEditor.Experimental.GraphView;
using UnityEngine.UIElements;
namespace Kurisu.NGDT.Editor
{
    [Ordered]
    public class AIBakeResolver : INodeResolver
    {
        public IDialogueNode CreateNodeInstance(Type type)
        {
            return new AIBakeNode();
        }
        public static bool IsAcceptable(Type behaviorType) => behaviorType == typeof(AIBakeModule);
        private class AIBakeNode : EditorModuleNode
        {
            private string lastSelection;
            private readonly Button bakeDialogue;
            private readonly Button autoGenerate;
            private readonly Button loadLast;
            public AIBakeNode()
            {
                mainContainer.Add(bakeDialogue = new Button(GenerateCurrentSelection) { text = "Bake Dialogue" });
                mainContainer.Add(autoGenerate = new Button(AutoGenerateFromSelection) { text = "Auto Generate Dialogue" });
                mainContainer.Add(loadLast = new Button(LoadLastBakeSelections) { text = "Load Last Bake Selections" });
            }
            private void LoadLastBakeSelections()
            {
                if (!string.IsNullOrEmpty(lastSelection))
                {
                    var lastSelections = JsonConvert.DeserializeObject<string[]>(lastSelection);
                    foreach (var selection in lastSelections)
                    {
                        var node = MapTreeView.View.Query<Node>().ToList().OfType<IDialogueNode>().FirstOrDefault(x => x.GUID == selection);
                        if (node != null) MapTreeView.View.AddToSelection(node.View);
                    }
                }
            }
            private async void GenerateCurrentSelection()
            {
                bakeDialogue.SetEnabled(false);
                autoGenerate.SetEnabled(false);
                SaveCurrentSelection();
                await MapTreeView.GenerateDialogue();
                bakeDialogue.SetEnabled(true);
                autoGenerate.SetEnabled(true);
            }
            private async void AutoGenerateFromSelection()
            {
                bakeDialogue.SetEnabled(false);
                autoGenerate.SetEnabled(false);
                SaveCurrentSelection();
                await MapTreeView.AutoGenerateDialogue();
                bakeDialogue.SetEnabled(true);
                autoGenerate.SetEnabled(true);
            }
            private void SaveCurrentSelection()
            {
                var containers = MapTreeView.View.selection.OfType<ContainerNode>();
                lastSelection = JsonConvert.SerializeObject(containers.Select(x => x.GUID).ToArray());
                loadLast.SetEnabled(true);
            }
            protected override void OnRestore()
            {
                lastSelection = (NodeBehavior as AIBakeModule).lastSelection;
                if (string.IsNullOrEmpty(lastSelection))
                {
                    loadLast.SetEnabled(false);
                }
            }
            protected override void OnCommit(Stack<IDialogueNode> stack)
            {
                (NodeBehavior as AIBakeModule).lastSelection = lastSelection;
            }
        }
    }
}
